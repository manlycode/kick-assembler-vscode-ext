import { Parameter } from "./KickPreprocessors";

export interface Directive {
	name: string;
	insertLabel?: string;
	otherNames?: string[];
	description: string;
	example: string;
	documentation?: string[];
	parameters?: Parameter[];
	relatedTo?: string[];
	deprecated?: boolean;
	snippet?: string;
}

export const Star:Directive = 
	{
		name: '*',
		example: '*=$1000',
		description: 'Sets the memory position to a given value.',
		snippet: '=$${1:1000} "${2:Block}"\n'
	}
;
export const Directives:Directive[] = [
	{
		name: '.align',
		example: '.align $100',
		description: "Aligns the memory position with the given value. Ex. '.align " +
			"$100' at memory position $1234 will set the position to $1300.",
		snippet: " $${1:100}\n"
	},
	{
		name: '.assert',
		example: '.assert "Test 1",2+2,4',
		description: 'Asserts that two expressions or codeblocks are equal.',
		snippet: ' "${1:Test}",'
	},
	{
		name: '.asserterror',
		example: '.asserterror "Test 2", List().get(27)',
		description: 'Asserts that a given expression or codeblock generates an error.',
		snippet: ' "${1:Test}",'
	},
	{
		name: '.break',
		example: '.break',
		description: 'Puts a breakpoint on the next generated bytes.',
		snippet: '\n'
	},
	{
		name: '.by',
		example: '.by $01,$02,$03',
		description: "An alias for '.byte'.",
		snippet: ' '
	},
	{
		name: '.byte',
		example: '.byte $01,$02,$03',
		description: 'Outputs bytes.',
		snippet: ' '
	},
	{
		name: '.const',
		example: '.const DELAY=7',
		description: 'Defines a constant.',
		snippet: ' ${1:name}='
	},
	{
		name: '.define',
		example: '.define width, height {...}',
		description: 'Executes a block of directives in ' +
			"'functionmode' (faster) to define values.",
		snippet: ' ${1:variables} {\n\t$0\n}\n'
	},
	{
		name: '.disk',
		example: '.disk [..disk pararamters..] {..fileparameters..}',
		description: 'Creates a d64 image file.',
		snippet: ' [${1:diskparameters}] {\n\t${2:fileparameters\n}\n'
	},
	{
		name: '.dw',
		example: '.dw $12341234',
		description: "An alias for '.dword'.",
		snippet: ' '
	},
	{
		name: '.dword',
		example: '.dword $12341234',
		description: 'Outputs doublewords (4 byte values).',
		snippet: ' '
	},
	{
		name: '.encoding',
		example: '.encoding "screencode_upper"',
		description: 'Sets the character encoding.',
		snippet: ' "${1|petscii_mixed,petscii_upper,screencode_mixed,screencode_upper|}"\n'
	},
	{
		name: '.enum',
		example: '.enum {on, off}',
		description: 'Defines a series of constants.',
		snippet: ' {\n\t${1:constant}\n}\n'
	},
	{
		name: '.error',
		example: '.error "not good!"',
		description: 'Creates an user raised error.',
		snippet: ' "${1:error}"\n'
	},
	{
		name: '.errorif',
		example: '.errorif x>10 "not good!"',
		description: 'Creates an user raised error if condition is evaluated to true.',
		snippet: ' ${1:expression} "${2:error}"\n'
	},
	{
		name: '.eval',
		example: '.eval x=x+y/2',
		description: 'Evaluates a script expression.',
		snippet: ' '
	},
	{
		name: '.file',
		example: '.file [name="myfile.prg" segments="Code, Data"]',
		description: 'Creates a prg or bin file from the given segments.',
		snippet: ' [name="${1:filename}", segments="${2:segments}"]\n'
	},
	{
		name: '.filemodify',
		example: '.filemodify Encrypt(33)',
		description: 'Modify the output of the current source file with the given modifier.',
		snippet: ' '
	},
	{
		name: '.filenamespace',
		example: '.filenamespace myspace',
		description: 'Creates a namespace for all the ' +
			'following directives in the current ' +
			'source file.',
		snippet: ' ${1:namespace}'
	},
	{
		name: '.fill',
		example: '.fill 10, i*2',
		description: 'Fills a number of bytes with the value of a given expression.',
		snippet: ' ${1:value}, ${2:expression}'
	},
	{
		name: '.fillword',
		example: '.fillword 10, i*$102',
		description: 'Fills a number of words with the value of a given expression.',
		snippet: ' ${1:value}, ${2:expression}'
	},
	{	
		name: '.for', 
		example: '.for(var i;i<10;i++)',
		description: "Creates a for loop",
		snippet: ' (${1:init};${2:expression};${3:iterator}) {\n\t$0\n}\n'
	 },
	{
		name: '.function',
		example: '.function area(h,w) {..}',
		description: 'Defines a function.',
		snippet: ' ${1:name}(${2:parameter}) {\n\t$0\n}\n'
	},
	{
		name: '.if',
		example: '.if(x>10) {...}',
		description: 'Executes code if the given condition is true.',
		snippet: ' (${1:expression}) {\n\t$0\n}\n'
	},
	{
		name: '.import binary',
		example: '.import binary "Music.bin"',
		description: 'Imports a binary file.',
		snippet: ' "${1:filename}"\n'
	},
	{
		name: '.import c64',
		example: '.import c64 "Music.c64"',
		description: "Imports a c64 files. Same as '.import binary', but " +
			'ignores the two address bytes at the start of the ' +
			'file.',
		snippet: ' "${1:filename}"\n'
	},
	{
		name: '.import source',
		example: '.import source "MyLib.asm"',
		description: 'Imports another source file. (Deprecated, use #import instead)',
		deprecated: true,
		snippet: ' "${1:filename}"\n'
	},
	{
		name: '.import text',
		example: '.import text "scroll.txt"',
		description: 'Imports a text file.',
		snippet: ' "${1:filename}"\n'
	},
	{
		name: '.importonce',
		example: '.importonce',
		description: 'Make the assembler skip the current file if it has ' +
			'already been imported. (Deprecated, use #importonce ' +
			'instead)',
		deprecated: true,
		snippet: '\n'
	},
	{
		name: '.label',
		example: '.label color=$d020',
		description: 'Assigns a given expression to a label.',
		snippet: ' ${1:name}='
	},
	{
		name: '.lohifill',
		example: '.lohifill $100, i*40',
		description: 'Fills two table with hi and lo byte of the given ' +
			'expression. Address of the tables can be read by connecting ' +
			'a label.',
		snippet: ' ${1:amount}, '
	},
	{
		name: '.macro',
		example: '.macro BasicUpstart() {...}',
		description: 'Defines a macro.',
		snippet: ' ${1:name}(${2:parameter}) {\n\t$0\n}\n'
	},
	{
		name: '.memblock',
		example: '.memblock "New block"',
		description: 'Defines a new memoryblock at the current memoryposition.',
		snippet: ' "${1:name}"\n'
	},
	{
		name: '.modify',
		example: '.modify Encrypt(27) {...}',
		description: 'Modifies the output of a codeblock using the given modifier.',
		snippet: ' ${1:modifier} {\n\t$0\n}\n'
	},
	{
		name: '.namespace',
		example: '.namespace myspace {..}',
		description: 'Creates a local namespace.',
		snippet: ' ${1:namespace} {\n\t$0\n}\n'
	},
	{ 
		name: '.pc', 
		example: '.pc=$1000', 
		description: "Same as '*='",
		snippet: '=$${1:value}'
	},
	{
		name: '.plugin',
		example: '.plugin "plugins.macros.MyMacro"',
		description: 'Tells the assembler to look for a plugin at the given java-package path.',
		snippet: ' "${1:plugin}"\n'
	},
	{
		name: '.print',
		example: '.print "Hello"',
		description: 'Prints a message to the console in the last pass.',
		snippet: ' "${1:text}"\n'
	},
	{
		name: '.printnow',
		example: '.printnow "Hello now"',
		description: 'Prints a message to the console immediately.',
		snippet: ' "${1:text}"\n'
	},
	{
		name: '.pseudocommand',
		example: '.pseudocommand mov src:tar {...}',
		description: 'Defines a pseudocommand.',
		snippet: ' ${1:command} ${2:arguments} {\n\t$0\n}\n'
	},
	{
		name: '.pseudopc',
		example: '.pseudopc $2000 {...}',
		description: 'Sets the program counter to something ' +
			'else than the actual memory position.',
		snippet: ' $${1:value} {\n\t$0\n}\n'
	},
	{
		name: '.return',
		example: '.return 27',
		description: 'Used inside functions to return a value.',
		snippet: ' '
	},
	{
		name: '.segment',
		example: '.segment Data "My Data"',
		description: 'Switches to another segment.',
		snippet: ' ${1:name} "${2:block}"\n'
	},
	{
		name: '.segmentdef',
		example: '.segmentdef Data [start=$1000]',
		description: 'Defines a segment.',
		snippet: ' ${1:name} [${2:option}]\n'
	},
	{
		name: '.segmentout',
		example: '.segmentout [segments="DRIVE_CODE"]',
		description: 'Output the bytes of an intermediate segment to the current memoryblock.',
		snippet: ' [${1:options}]\n'
	},
	{
		name: '.struct',
		example: '.struct Point {x,y}',
		description: 'Creates a user defined structure.',
		snippet: ' ${1:name} {\n\t$0\n}\n'
	},
	{
		name: '.te',
		example: '.te "hello"',
		description: "An alias for '.text'.",
		snippet: ' "${1:text}"\n'
	},
	{
		name: '.text',
		example: '.text "hello"',
		description: 'Dumps text bytes to memory.',
		snippet: ' "${1:text}"\n'
	},
	{
		name: '.var',
		example: '.var x=27',
		description: 'Defines a variable.',
		snippet: ' ${1:name}='
	},
	{
		name: '.while',
		example: '.while(i<10) {...}',
		description: 'Creates a while loop.',
		snippet: ' (${1:expression}) {\n\t$0\n}\n'
	},
	{
		name: '.wo',
		example: '.wo $1000,$1012',
		description: "An alias for '.word'.",
		snippet: ' '
	},
	{
		name: '.word',
		example: '.word $1000,$1012',
		description: 'Outputs words (two bytes values),',
		snippet: ' '
	},
	{
		name: '.zp',
		example: '.zp { label: .byte 0 ... }',
		description: 'Marks unresolved labels as being in the zeropage.',
		snippet: ' {\n\t$0\n}\n'
	}
];